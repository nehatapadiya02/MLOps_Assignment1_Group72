name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m venv venv
          . venv/bin/activate
          pip install -r requirements.txt


  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m venv venv
          . venv/bin/activate
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 --max-line-length=88 main.py --count --select=E9,F63,F7,F82 --show-source --statistics

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pip install pytest
          pytest 'tests/'

  # build_and_deploy:
  #   runs-on: ubuntu-latest
  #   needs: test
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Build Docker image
  #       run: |
  #         docker build -t weather-forecast-app .

  #     - name: Deploy application
  #       run: |
  #         docker run -d -p 5000:5000 weather-forecast-app
  #         echo "Application deployed at http://localhost:5000"
  #         printf "To predict temperature use:\nInvoke-WebRequest -Uri \"http://127.0.0.1:5000/predict\" -Method POST -ContentType \"application/json\" -Body 
  #         '[
  #           {
  #             \"Apparent Temperature (C)\": 22.5,
  #             \"Humidity\": 0.75,
  #             \"Wind Speed (km/h)\": 10,
  #             \"Wind Bearing (degrees)\": 250,
  #             \"Visibility (km)\": 10.2,
  #             \"Pressure (millibars)\": 1015,
  #             \"Precip Type_snow\": 1
  #           }
  #         ]'\n"

  build_and_deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # - name: Log in to Docker Hub
      #   # uses: docker/login-action@v2
      #   # with:
      #   #   username: ${{ secrets.DOCKER_USERNAME }}
      #   #   password: ${{ secrets.DOCKER_PASSWORD }}
      #   run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: |
          docker build -t weather-forecast-app:${{ github.sha }} .

      - name: Log in to Azure Container Registry
        run: echo "${{ secrets.AZURE_ACR_PASSWORD }}" | docker login ${{ secrets.AZURE_ACR_LOGIN_SERVER }} -u ${{ secrets.AZURE_ACR_USERNAME }} --password-stdin

      - name: Push Docker image
        run: |
          docker tag weather-forecast-app:${{ github.sha }} weatherforecastregistry.azurecr.io/weather-forecast-app:${{ github.sha }}
          docker push weatherforecastregistry.azurecr.io/weather-forecast-app:${{ github.sha }}

      # - name: Set up Azure CLI
      #   uses: azure/azure-cli-action@v1
      #   with:
      #     azure-cli-version: '2.0.72'

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Log in to Azure
        run: az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Configure kubectl
        run: |
          az aks get-credentials --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_AKS_CLUSTER }}

      # - name: Set up Helm
      #   uses: azure/setup-helm@v1

      - name: Upgrade Helm Chart
        run: |
          helm upgrade --install weather-forecast-app ./weather-forecast-app --set image.tag=v1

      - name: Verify Deployment
        run: |
          kubectl get services
          kubectl get pods
