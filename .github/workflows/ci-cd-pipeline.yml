name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m venv venv
          . venv/bin/activate
          pip install -r requirements.txt

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m venv venv
          . venv/bin/activate
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 --max-line-length=88 main.py --count --select=E9,F63,F7,F82 --show-source --statistics

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pip install pytest
          pytest 'tests/'

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: test
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         python -m venv venv
  #         . venv/bin/activate
  #         pip install -r requirements.txt

  #     - name: Deploy application
  #       run: |
  #         # Replace this with actual deployment commands
  #         echo "Deploying application..."

  build_and_deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Docker image
        run: |
          docker build -t weather-forecast-app .

      - name: Deploy application
        run: |
          docker run -d -p 5000:5000 weather-forecast-app
          echo "Application deployed at http://localhost:5000"
          printf "To predict temperature use:\nInvoke-WebRequest -Uri \"http://127.0.0.1:5000/predict\" -Method POST -ContentType \"application/json\" -Body 
          '[
            {
              \"Apparent Temperature (C)\": 22.5,
              \"Humidity\": 0.75,
              \"Wind Speed (km/h)\": 10,
              \"Wind Bearing (degrees)\": 250,
              \"Visibility (km)\": 10.2,
              \"Pressure (millibars)\": 1015,
              \"Precip Type_snow\": 1
            }
          ]'\n"
